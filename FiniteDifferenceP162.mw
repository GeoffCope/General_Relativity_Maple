<?xml version="1.0" encoding="UTF-8"?>
<Worksheet>
<Version major="17" minor="0"/>
<Label-Scheme value="2" prefix=""/>
<View-Properties presentation="false" autoexpanding_sections="true"><Zoom percentage="200"/>
</View-Properties>
<MapleNet-Properties elisiondigitsbefore="100" labelling="true" indentamount="4" elisiontermsthreshold="10000" ansi="false" errorbreak="1" useclientjvm="true" echo="1" imaginaryunit="I" labelwidth="20" contextmenusize="automatic" plotdriver="opengl" elisiondigitsafter="100" plotoutput="terminal" helpbrowser="standard" rtablesize="10" elisiontermsbefore="100" elisiondigitsthreshold="10000" typesetting="standard" plotdevice="inline" verboseproc="1" showassumed="1" errorcursor="false" longdelim="true" plotoptions="" quiet="false" elisiontermsafter="100" screenwidth="79" preplot="" prettyprint="3" displayprecision="-1" screenpixelheight="800" warnlevel="3" screenheight="25" latexwidth="8.0" postplot="" prompt="&gt; " ShowLabels="true"/>
<Styles>
<Font name="Ordered List 1" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Annotation Text" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Ordered List 2" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Ordered List 3" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Ordered List 4" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Ordered List 5" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Author" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Annotation Title" background="[255,255,255]" bold="true" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="18" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Warning" background="[255,255,255]" bold="false" executable="false" family="Courier New" foreground="[0,0,255]" italic="false" opaque="false" readonly="true" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Caption Reference" background="[255,255,255]" bold="true" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Maple Input Placeholder" background="[255,255,255]" bold="true" executable="true" family="Courier New" foreground="[200,0,200]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="true"/>
<Font name="Maple Plot" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Code" background="[255,255,255]" bold="false" executable="false" family="Courier New" foreground="[255,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Line Printed Output" background="[255,255,255]" bold="false" executable="false" family="Courier New" foreground="[0,0,255]" italic="false" opaque="false" readonly="true" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Text Output" background="[255,255,255]" bold="false" executable="false" family="Courier New" foreground="[0,0,255]" italic="false" opaque="false" readonly="true" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Diagnostic" background="[255,255,255]" bold="false" executable="false" family="Courier New" foreground="[40,120,40]" italic="false" opaque="false" readonly="true" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="2D Inert Output" background="[255,255,255]" bold="false" executable="true" family="Times New Roman" foreground="[144,144,144]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Normal" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Hyperlink" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,128,128]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="true" placeholder="false"/>
<Font name="Maple Output" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Dash Item" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="2D Math" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Maple Input" background="[255,255,255]" bold="true" executable="true" family="Courier New" foreground="[120,0,14]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="2D Output" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,255]" italic="false" opaque="false" readonly="true" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="2D Input" background="[255,255,255]" bold="false" executable="true" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="HyperlinkError" background="[255,255,255]" bold="false" executable="false" family="Courier New" foreground="[255,0,255]" italic="false" opaque="false" readonly="true" size="12" subscript="false" superscript="false" underline="true" placeholder="false"/>
<Font name="Header and Footer" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="10" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Error" background="[255,255,255]" bold="false" executable="false" family="Courier New" foreground="[255,0,255]" italic="false" opaque="false" readonly="true" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Title" background="[255,255,255]" bold="true" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="18" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Heading 1" background="[255,255,255]" bold="true" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="18" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Text" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Bullet Item" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Heading 4" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="true" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Equation Label" background="[255,255,255]" bold="true" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Heading 3" background="[255,255,255]" bold="true" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="true" opaque="false" readonly="false" size="14" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Heading 2" background="[255,255,255]" bold="true" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="16" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="HyperlinkWarning" background="[255,255,255]" bold="false" executable="false" family="Courier New" foreground="[0,0,255]" italic="false" opaque="false" readonly="true" size="12" subscript="false" superscript="false" underline="true" placeholder="false"/>
<Font name="Dictionary Hyperlink" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[147,0,15]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="true" placeholder="false"/>
<Font name="Atomic Variable" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[175,0,175]" italic="true" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Caption Text" background="[255,255,255]" bold="true" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="List Item" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Layout name="Ordered List 1" alignment="left" bullet="numeric" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="3" spacebelow="3" linebreak="space" pagebreak-before="false" initial="-1" bulletsuffix=""/>
<Layout name="Ordered List 2" alignment="left" bullet="alphabetic" firstindent="0" leftmargin="36" rightmargin="0" linespacing="0.0" spaceabove="3" spacebelow="3" linebreak="space" pagebreak-before="false" initial="-1" bulletsuffix=""/>
<Layout name="Ordered List 3" alignment="left" bullet="roman" firstindent="0" leftmargin="72" rightmargin="0" linespacing="0.0" spaceabove="3" spacebelow="3" linebreak="space" pagebreak-before="false" initial="-1" bulletsuffix=""/>
<Layout name="Ordered List 4" alignment="left" bullet="ALPHABETIC" firstindent="0" leftmargin="108" rightmargin="0" linespacing="0.0" spaceabove="3" spacebelow="3" linebreak="space" pagebreak-before="false" initial="-1" bulletsuffix=""/>
<Layout name="Ordered List 5" alignment="left" bullet="ROMAN" firstindent="0" leftmargin="144" rightmargin="0" linespacing="0.0" spaceabove="3" spacebelow="3" linebreak="space" pagebreak-before="false" initial="-1" bulletsuffix=""/>
<Layout name="Author" alignment="centred" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="8" spacebelow="8" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Warning" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Annotation Title" alignment="centred" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="12" spacebelow="12" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Maple Plot" alignment="centred" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Line Printed Output" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="any" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Text Output" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="newline" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Diagnostic" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="any" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Normal" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Maple Output" alignment="centred" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.3" spaceabove="0" spacebelow="0" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Dash Item" alignment="left" bullet="dash" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="3" spacebelow="3" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="HyperlinkError" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Error" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Title" alignment="centred" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="12" spacebelow="12" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Heading 1" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="8" spacebelow="4" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Bullet Item" alignment="left" bullet="dot" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="3" spacebelow="3" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Heading 4" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Heading 3" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Heading 2" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="8" spacebelow="2" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="HyperlinkWarning" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="List Item" alignment="left" bullet="indent" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="3" spacebelow="3" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Pencil-style name="Pencil 5" pen-color="[255,0,0]" pen-height="5.0" pen-width="5.0" pen-opacity="1.0"/>
<Pencil-style name="Pencil 4" pen-color="[0,0,255]" pen-height="3.0" pen-width="3.0" pen-opacity="1.0"/>
<Pencil-style name="Pencil 3" pen-color="[0,0,0]" pen-height="3.0" pen-width="3.0" pen-opacity="1.0"/>
<Pencil-style name="Pencil 2" pen-color="[0,0,255]" pen-height="1.0" pen-width="1.0" pen-opacity="1.0"/>
<Pencil-style name="Pencil 1" pen-color="[0,0,0]" pen-height="1.0" pen-width="1.0" pen-opacity="1.0"/>
<Highlighter-style name="Highlighter 2" pen-color="[255,204,0]" pen-height="14.0" pen-width="14.0" pen-opacity="0.8"/>
<Highlighter-style name="Highlighter 1" pen-color="[255,153,255]" pen-height="12.0" pen-width="8.0" pen-opacity="0.8"/>
<Highlighter-style name="Highlighter 4" pen-color="[0,255,255]" pen-height="32.0" pen-width="32.0" pen-opacity="0.8"/>
<Highlighter-style name="Highlighter 3" pen-color="[51,255,0]" pen-height="24.0" pen-width="24.0" pen-opacity="0.8"/>
<Highlighter-style name="Highlighter 5" pen-color="[255,255,0]" pen-height="48.0" pen-width="48.0" pen-opacity="0.8"/>
</Styles>
<Task-table>
    <Task-category name="&lt;default&gt;"/>
</Task-table>
<Task/>
<Group labelreference="L1" drawlabel="true">
<Input>
<Text-field prompt="&gt; " style="Maple Input" layout="Normal"><Equation executable="true" style="2D Input" input-equation="" display="LUklbXJvd0c2Iy9JK21vZHVsZW5hbWVHNiJJLFR5cGVzZXR0aW5nR0koX3N5c2xpYkdGJzYlLUkjbWlHRiQ2JVEocmVzdGFydEYnLyUnaXRhbGljR1EldHJ1ZUYnLyUsbWF0aHZhcmlhbnRHUSdpdGFsaWNGJy8lK2V4ZWN1dGFibGVHUSZmYWxzZUYnL0YzUSdub3JtYWxGJw==">LUklbXJvd0c2Iy9JK21vZHVsZW5hbWVHNiJJLFR5cGVzZXR0aW5nR0koX3N5c2xpYkdGJzYjLUkjbWlHRiQ2JVEocmVzdGFydEYnLyUnaXRhbGljR1EldHJ1ZUYnLyUsbWF0aHZhcmlhbnRHUSdpdGFsaWNGJw==</Equation></Text-field>
</Input>
</Group>
<Group labelreference="L2" drawlabel="true">
<Input>
<Text-field prompt="&gt; " style="Maple Input" layout="Normal"><Equation executable="true" style="2D Input" input-equation="FiniteDifferencep162 := proc (NX, NT, L, T) local nu, h, k, r, f, X, IC, BC, IBC, FD, j, i, G, ops1; nu := 1; h := L/NX; k := T/NT; r := nu*k/h^2; f := proc (x) options operator, arrow; evalf(sin(Pi*x)) end proc; for i from 0 to NX do X[i] := i*h end do; IC := {seq(U(i, 0) = f(X[i]), i = 0 .. NX)}; BC := {seq(U(0, j) = 0, j = 0 .. NT)}; IBC := `union`(IC, BC); FD := proc (i, j) options operator, arrow; (1-2*r)*U(i, j)+r*(U(i+1, j)+U(i-1, j)) end proc; for j from 0 to NT do for i to NX-1 do U(i, j+1) := subs(IBC, FD(i, j)) end do end do; G := proc (j) options operator, arrow; plot([seq([X(i), subs(IBC, U(i, j))], i = 0 .. NX)], color = blue) end proc; ops1 := thickness = 3, labels = [&quot;X&quot;, &quot;Y&quot;]; display([seq(G(j), j = 0 .. NT)], insequence = true, ops1) end proc;" display="LUklbXJvd0c2Iy9JK21vZHVsZW5hbWVHNiJJLFR5cGVzZXR0aW5nR0koX3N5c2xpYkdGJzZoeC1JI21pR0YkNiVRNUZpbml0ZURpZmZlcmVuY2VwMTYyRicvJSdpdGFsaWNHUSV0cnVlRicvJSxtYXRodmFyaWFudEdRJ2l0YWxpY0YnLUkjbW9HRiQ2LVEqJmNvbG9uZXE7RicvRjNRJ25vcm1hbEYnLyUmZmVuY2VHUSZmYWxzZUYnLyUqc2VwYXJhdG9yR0Y9LyUpc3RyZXRjaHlHRj0vJSpzeW1tZXRyaWNHRj0vJShsYXJnZW9wR0Y9LyUubW92YWJsZWxpbWl0c0dGPS8lJ2FjY2VudEdGPS8lJ2xzcGFjZUdRLDAuMjc3Nzc3OGVtRicvJSdyc3BhY2VHRkwtRjY2L1ElcHJvY0YnLyUlYm9sZEdGMS9GM1ElYm9sZEYnLyUrZm9udHdlaWdodEdGVUY7Rj5GQEZCRkRGRkZIL0ZLUSYwLjBlbUYnL0ZORlktSShtZmVuY2VkR0YkNiQtRiM2Ki1GLDYlUSNOWEYnRi9GMi1GNjYtUSIsRidGOUY7L0Y/RjFGQEZCRkRGRkZIRlgvRk5RLDAuMzMzMzMzM2VtRictRiw2JVEjTlRGJ0YvRjJGXW8tRiw2JVEiTEYnRi9GMkZdby1GLDYlUSJURidGL0YyRjlGOS1GLDYjUSFGJy1JJ21zcGFjZUdGJDYmLyUnaGVpZ2h0R1EmMC4wZXhGJy8lJndpZHRoR0ZZLyUmZGVwdGhHRmRwLyUqbGluZWJyZWFrR1EobmV3bGluZUYnLUY2Ni1RIiNGJ0Y5RjtGPkZARkJGREZGRkhGWEZaLUYsNiVRVX5+Tm9ubGluZWFsflBERSdzfndpdGh+TWFwbGV+YW5kfk1hdGhlbWF0aWNhfnAufjE2Mn5GJ0YvRjJGX3AtRjY2LVEifkYnRjlGO0Y+RkBGQkZERkZGSEZYRlotRjY2L1EmbG9jYWxGJ0ZSRlRGVkY7Rj5GQEZCRkRGRkZIRlhGWkZicS1GLDYlUSNudUYnL0YwRj1GOUZdby1GLDYlUSJoRidGL0YyRl1vLUYsNiVRImtGJ0YvRjJGXW8tRiw2JVEickYnRi9GMkZdby1GLDYlUSJmRidGL0YyRl1vLUYsNiVRIlhGJ0YvRjJGXW8tRiw2JVEjSUNGJ0YvRjJGXW8tRiw2JVEjQkNGJ0YvRjJGXW8tRiw2JVEkSUJDRidGL0YyRl1vLUYsNiVRI0ZERidGL0YyRl1vLUYsNiVRImpGJ0YvRjJGXW8tRiw2JVEiaUYnRi9GMkZdby1GLDYlUSJHRidGL0YyRl1vLUYsNiVRJW9wczFGJ0YvRjItRjY2LVEiO0YnRjlGO0Zgb0ZARkJGREZGRkhGWEZNRl9wRmJxRmJxRmhxRjUtSSNtbkdGJDYkUSIxRidGOUZjdEZfcEZcckY1LUkmbWZyYWNHRiQ2KEZmby1GIzYkRmpuRjkvJS5saW5ldGhpY2tuZXNzR0ZpdC8lK2Rlbm9tYWxpZ25HUSdjZW50ZXJGJy8lKW51bWFsaWduR0ZjdS8lKWJldmVsbGVkR0Y9RmN0Rl9wRmJxRmJxRl9yRjUtRlt1NihGaW8tRiM2JEZjb0Y5Rl91RmF1RmR1RmZ1RmN0Rl9wRmJyRjUtRlt1NigtRiM2JkZocS1GNjYtUScmc2RvdDtGJ0Y5RjtGPkZARkJGREZGRkhGWEZaRl9yRjktRiM2JC1JJW1zdXBHRiQ2JUZcci1GIzYkLUZndDYkUSIyRidGOUY5LyUxc3VwZXJzY3JpcHRzaGlmdEdRIjBGJ0Y5Rl91RmF1RmR1RmZ1RmN0Rl9wRmJxRmJxRmVyRjUtRiw2JVEieEYnRi9GMi1GNjYtUSgmc3JhcnI7RidGOUY7Rj5GQEZCRkRGRkZIRlhGWi1GLDYlUSZldmFsZkYnRi9GMi1GZm42JC1GIzYlLUYsNiVRJHNpbkYnRltyRjktRmZuNiQtRiM2Ji1GLDYlUSNQaUYnRltyRjlGYHZGYHdGOUY5RjlGOUZjdEZfcC1GNjYvUSRmb3JGJ0ZSRlRGVkY7Rj5GQEZCRkRGRkZIRlhGWkZicUZqc0ZicS1GNjYvUSVmcm9tRidGUkZURlZGO0Y+RkBGQkZERkZGSEZYRlpGYnEtRmd0NiRGX3dGOUZicS1GNjYvUSN0b0YnRlJGVEZWRjtGPkZARkJGREZGRkhGWEZaRmJxRmpuRmJxLUY2Ni9RI2RvRidGUkZURlZGO0Y+RkBGQkZERkZGSEZYRlpGX3BGYnFGaHItRmZuNiYtRiM2JEZqc0Y5RjkvJSVvcGVuR1EiW0YnLyUmY2xvc2VHUSJdRidGNUZqc0ZgdkZcckZfcEZicS1GNjYvUSNvZEYnRlJGVEZWRjtGPkZARkJGREZGRkhGWEZaRmN0Rl9wRltzRjUtRmZuNiYtRiM2JS1GLDYlUSRzZXFGJ0YvRjItRmZuNiQtRiM2Li1GLDYlUSJVRidGL0YyLUZmbjYkLUYjNiZGanNGXW9GXXlGOUY5LUY2Ni1RIj1GJ0Y5RjtGPkZARkJGREZGRkhGSkZNRmVyLUZmbjYkLUYjNiVGaHJGZXlGOUY5Rl1vRmpzRmRbbEZdeS1GNjYtUSMuLkYnRjlGO0Y+RkBGQkZERkZGSC9GS1EsMC4yMjIyMjIyZW1GJ0ZaRmpuRjlGOUY5RjkvRmp5USJ8ZnJGJy9GXXpRInxockYnRmN0Rl9wRmJxRmJxRl5zRjUtRmZuNiYtRiM2JUZmei1GZm42JC1GIzYtRl1bbC1GZm42JC1GIzYmRl15Rl1vRmdzRjlGOUZkW2xGXXlGXW9GZ3NGZFtsRl15RltcbEZjb0Y5RjlGOUY5RmBcbEZiXGxGY3RGX3BGYXNGNUZicUZbc0ZicS1GNjYvUSZ1bmlvbkYnRlJGVEZWRjtGPkZARkJGREZGRkhGWEZaRmJxRl5zRmN0Rl9wRmJxRmJxRmRzRjUtRmZuNiQtRiM2JkZqc0Zdb0Znc0Y5RjlGY3ctRmZuNiQtRiM2KEZmdC1GNjYtUSgmbWludXM7RidGOUY7Rj5GQEZCRkRGRkZIRl5cbC9GTkZfXGxGanZGYHZGYnJGOUY5RmB2Rl1bbEZjXWwtRjY2LVEiK0YnRjlGO0Y+RkBGQkZERkZGSEZeXGxGXl5sRmJyRmB2LUZmbjYkLUYjNilGYnFGXVtsLUZmbjYkLUYjNihGanNGX15sRmZ0Rl1vRmdzRjlGOUZfXmxGXVtsLUZmbjYkLUYjNihGanNGW15sRmZ0Rl1vRmdzRjlGOUY5RjlGY3RGX3BGZ3hGYnFGZ3NGYnFGanhGYnFGXXlGYnFGX3lGYnFGY29GYnFGYnlGX3BGYnFGZ3hGYnFGanNGYnFGanhGYnFGZnRGYnFGX3lGYnFGam5GW15sRmZ0RmJxRmJ5Rl9wRmJxRl1bbC1GZm42JC1GIzYoRmpzRl1vRmdzRl9ebEZmdEY5RjlGNS1GLDYlUSVzdWJzRidGL0YyLUZmbjYkLUYjNidGYXNGXW9GZHNGY11sRjlGOUZccEZfcEZicUZfekZjdEZfcEZicUZfekZicUZjdEZfcEZddEY1RmdzRmN3LUYsNiVRJXBsb3RGJ0YvRjItRmZuNiQtRiM2KC1GZm42Ji1GIzYlRmZ6LUZmbjYkLUYjNiotRmZuNiYtRiM2KEZoci1GZm42JEZneUY5Rl1vRmJfbC1GZm42JC1GIzYnRmFzRl1vRl1bbEZjXWxGOUY5RjlGOUZpeUZcekZdb0Zqc0ZkW2xGXXlGW1xsRmpuRjlGOUY5RjlGaXlGXHpGXW8tRiw2JVEmY29sb3JGJ0YvRjJGZFtsLUYsNiVRJWJsdWVGJ0YvRjJGOUY5RmN0Rl9wRmJxRmJxRmB0RjUtRiw2JVEqdGhpY2tuZXNzRidGL0YyRmRbbC1GZ3Q2JFEiM0YnRjlGXW8tRiw2JVEnbGFiZWxzRidGL0YyRmRbbC1GZm42Ji1GIzYoRlxwLUkjbXNHRiQ2I0ZqckZdby1GZmJsNiNRIllGJ0ZccEY5RjlGaXlGXHpGY3RGX3AtRiw2JVEoZGlzcGxheUYnRi9GMi1GZm42JC1GIzYqLUZmbjYmLUYjNiVGZnotRmZuNiQtRiM2K0ZddC1GZm42JC1GIzYkRmdzRjlGOUZdb0Znc0ZkW2xGXXlGW1xsRmNvRjlGOUY5RjlGaXlGXHpGXW8tRiw2JVEraW5zZXF1ZW5jZUYnRi9GMkZkW2wtRiw2JUYxRi9GMkZdb0ZgdEY5RjlGY3RGX3BGYnEtRjY2L1EkZW5kRidGUkZURlZGO0Y+RkBGQkZERkZGSEZYRlpGYnFGT0ZjdEZicS8lK2V4ZWN1dGFibGVHRj1GOQ==">QyQ+STVGaW5pdGVEaWZmZXJlbmNlcDE2Mkc2ImYqNiZJI05YR0YlSSNOVEdGJUkiTEdGJUkiVEdGJTYwSSNudUdGJUkiaEdGJUkia0dGJUkickdGJUkiZkdGJUkiWEdGJUkjSUNHRiVJI0JDR0YlSSRJQkNHRiVJI0ZER0YlSSJqR0YlSSJpR0YlSSJHR0YlSSVvcHMxR0YlRiVGJUMwPjgkIiIiPjglKiY5JkY+OSQhIiI+OCYqJjknRj45JUZEPjgnKihGPUY+RkZGPkZAISIjPjgoZio2I0kieEdGJUYlNiRJKW9wZXJhdG9yR0YlSSZhcnJvd0dGJUYlLUkmZXZhbGZHJSpwcm90ZWN0ZWRHNiMtSSRzaW5HRiU2IyomSSNQaUdGWEY+RkNGPkYlRiVGJT8oOC8iIiFGPkZDSSV0cnVlR0ZYPiY4KTYjRmpuKiZGam5GPkZARj4+OCo8Iy1JJHNlcUdGWDYkLy1JIlVHRiU2JEZqbkZbby1GTzYjRl5vL0ZqbjtGW29GQz44KzwjLUZmbzYkLy1Gam82JEZbbzguRltvL0ZocDtGW29GST44LC1JJnVuaW9uR0ZYNiRGY29GYXA+OC1mKjYkRjhGN0YlRlNGJSwmKiYsJkY+Rj5UI0ZNRj4tRmpvNiRGQ0ZJRj5GPiomRmdxRj4sJi1Gam82JCwmRkNGPkY+Rj5GSUY+LUZqbzYkLCZGQ0Y+RkRGPkZJRj5GPkY+RiVGJTYkRjBGSz8oRmhwRltvRj5GSUZcbz8oRmpuRj5GPkZhckZcbz4tRmpvNiRGam4sJkZocEY+Rj5GPi1JJXN1YnNHRlg2JEZccS1GYXE2JEZqbkZocD44MGYqNiNGN0YlRlNGJS1JJXBsb3RHRiU2JDcjLUZmbzYkNyQtVCU2I1QpLUZqcjYkVCctRmpvNiRGXHRGQy9GXHQ7RltvVCQvSSZjb2xvckdGJUklYmx1ZUdGJUYlRiU2KkYoRkNGMkZfb0Y1RlxxRjhGam42JD44MS9JKnRoaWNrbmVzc0dGJSIiJC9JJ2xhYmVsc0dGJTckUSJYRiVRIllGJS1JKGRpc3BsYXlHRiU2JTcjLUZmbzYkLUZfczYjRmhwRmlwL0kraW5zZXF1ZW5jZUdGJUZcb0ZbdUYlRiVGJUY+</Equation></Text-field>
</Input>
<Output>
<Text-field style="2D Output" layout="Maple Output"><Equation executable="false" style="2D Output" display="LUklbXJvd0c2Iy9JK21vZHVsZW5hbWVHNiJJLFR5cGVzZXR0aW5nR0koX3N5c2xpYkdGJzYoLUkjbWlHRiQ2JVE1RmluaXRlRGlmZmVyZW5jZXAxNjJGJy8lJ2l0YWxpY0dRJXRydWVGJy8lLG1hdGh2YXJpYW50R1EnaXRhbGljRictSSNtb0dGJDYtUSM6PUYnL0YzUSdub3JtYWxGJy8lJmZlbmNlR1EmZmFsc2VGJy8lKnNlcGFyYXRvckdGPS8lKXN0cmV0Y2h5R0Y9LyUqc3ltbWV0cmljR0Y9LyUobGFyZ2VvcEdGPS8lLm1vdmFibGVsaW1pdHNHRj0vJSdhY2NlbnRHRj0vJSdsc3BhY2VHUSwwLjI3Nzc3NzhlbUYnLyUncnNwYWNlR0ZMLUYjNiwtRjY2L1ElcHJvY0YnLyUlYm9sZEdGMS9GM1ElYm9sZEYnLyUrZm9udHdlaWdodEdGV0Y7Rj5GQEZCRkRGRkZIL0ZLUSYwLjBlbUYnL0ZORmVuLUkobWZlbmNlZEdGJDYkLUYjNiwtRiw2JVEjTlhGJ0YvRjItRjY2LVEiLEYnRjlGOy9GP0YxRkBGQkZERkZGSEZaL0ZOUSwwLjMzMzMzMzNlbUYnLUYsNiVRI05URidGL0YyRl9vLUYsNiVRIkxGJ0YvRjJGX28tRiw2JVEiVEYnRi9GMi8lK2ZvcmVncm91bmRHUShbMCwwLDBdRicvJSlyZWFkb25seUdGPUY5RjktSSdtc3BhY2VHRiQ2Ji8lJ2hlaWdodEdRJjAuMGV4RicvJSZ3aWR0aEdRJjAuNWVtRicvJSZkZXB0aEdGaHAvJSpsaW5lYnJlYWtHUTFmaXJzdHByb2NuZXdsaW5lRictRiM2Ki1GNjYvUSZsb2NhbEYnRlRGVkZYRjtGPkZARkJGREZGRkhGWkZmbi1GZHA2JkZmcEZpcEZccS9GX3FRJWF1dG9GJy1GIzZALUYsNiVRI251RicvRjBGPUY5Rl9vLUYsNiVRImhGJ0YvRjJGX28tRiw2JVEia0YnRi9GMkZfby1GLDYlUSJyRidGL0YyRl9vLUYsNiVRImZGJ0YvRjJGX28tRiw2JVEiWEYnRi9GMkZfby1GLDYlUSNJQ0YnRi9GMkZfby1GLDYlUSNCQ0YnRi9GMkZfby1GLDYlUSRJQkNGJ0YvRjJGX28tRiw2JVEjRkRGJ0YvRjJGX28tRiw2JVEiakYnRi9GMkZfby1GLDYlUSJpRidGL0YyRl9vLUYsNiVRIkdGJ0YvRjJGX28tRiw2JVElb3BzMUYnRi9GMkZecEZhcEY5LUY2Ni1RIjtGJ0Y5RjtGYm9GQEZCRkRGRkZIRlpGTUZjcEZecEZhcEY5LUYjNjMtRiM2KC1GIzYoRlxyRjUtSSNtbkdGJDYkUSIxRidGOUZecEZhcEY5Rmd0RmNwRl5wRmFwRjktRiM2KC1GIzYoRmByRjUtRiM2KC1GIzYmRmhvRl5wRmFwRjktRjY2LVEiL0YnRjlGO0Y+L0ZBRjFGQkZERkZGSC9GS1EsMC4xNjY2NjY3ZW1GJy9GTkZhdi1GIzYmRlxvRl5wRmFwRjlGXnBGYXBGOUZecEZhcEY5Rmd0RmNwRl5wRmFwRjktRiM2KC1GIzYoRmNyRjUtRiM2KC1GIzYmRltwRl5wRmFwRjlGXHYtRiM2JkZlb0ZecEZhcEY5Rl5wRmFwRjlGXnBGYXBGOUZndEZjcEZecEZhcEY5LUYjNigtRiM2KEZmckY1LUYjNigtRiM2KEZcci1GNjYtUSIqRidGOUY7Rj5GQEZCRkRGRkZIRmB2RmJ2RmNyRl5wRmFwRjlGXHYtRiM2Ji1GIzYoRmByLUY2Ni1RIl5GJ0Y5RjtGPkZARkJGREZGRkgvRktRLDAuMTExMTExMWVtRicvRk5GYngtRmF1NiRRIjJGJ0Y5Rl5wRmFwRjlGXnBGYXBGOUZecEZhcEY5Rl5wRmFwRjlGZ3RGY3BGXnBGYXBGOS1GIzYoLUYjNihGaXJGNS1GIzYoLUYsNiVRInhGJ0YvRjItRjY2LVEoJiM4NTk0O0YnRjlGO0Y+RkBGQkZERkZGSEZaRmZuLUYjNigtRiw2JVEmZXZhbGZGJ0YvRjItRjY2LVEwJkFwcGx5RnVuY3Rpb247RidGOUY7Rj5GQEZCRkRGRkZIRlpGZm4tRmhuNiQtRiM2Ji1GIzYoLUYsNiVRJHNpbkYnRl9yRjlGaHktRmhuNiQtRiM2Ji1GIzYmLUYsNiVRI1BpRidGX3JGOUZnd0ZdeUY5Rl5wRmFwRjlGOUZecEZhcEY5Rl5wRmFwRjlGOUZecEZhcEY5Rl5wRmFwRjlGXnBGYXBGOUZndEZjcEZecEZhcEY5LUYjNigtRiM2Ki1GIzYyLUY2Ni9RJGZvckYnRlRGVkZYRjtGPkZARkJGREZGRkhGWkZmbkZmcUZedEZmcS1GNjYvUSVmcm9tRidGVEZWRlhGO0Y+RkBGQkZERkZGSEZaRmZuRmZxLUZhdTYkUSIwRidGOUZmcS1GNjYvUSN0b0YnRlRGVkZYRjtGPkZARkJGREZGRkhGWkZmbkZmcUZcb0ZmcS1GNjYvUSNkb0YnRlRGVkZYRjtGPkZARkJGREZGRkhGWkZmbkZecEZhcEY5LUZkcDYmRmZwRmlwRlxxL0ZfcVE2aW5jcmVhc2VpbmRlbnRuZXdsaW5lRictRiM2KC1GIzYpRlxzLUY2Ni1RIltGJ0Y5L0Y8RjFGPkZfdkZCRkRGRkZIRmB2RmJ2LUYjNiZGXnRGXnBGYXBGOS1GNjYtUSJdRidGOUZdXWxGPkZfdkZCRkRGRkZIRmB2RmN4Rl5wRmFwRjlGNS1GIzYmRl50Rmd3RmByRjlGXnBGYXBGOS1GZHA2JkZmcEZpcEZccS9GX3FRNmRlY3JlYXNlaW5kZW50bmV3bGluZUYnLUY2Ni9RJ2VuZH5kb0YnRlRGVkZYRjtGPkZARkJGREZGRkhGWkZmbkZecEZhcEY5Rmd0RmNwRl5wRmFwRjktRiM2KC1GIzYoRl9zRjUtRmhuNiYtRiM2Ji1GIzYoLUYsNiVRJHNlcUYnRi9GMkZoeS1GaG42JC1GIzYoLUYjNigtRiM2KC1GLDYlUSJVRidGL0YyRmh5LUZobjYkLUYjNihGXnRGX29GaVtsRl5wRmFwRjlGOUZecEZhcEY5LUY2Ni1RIj1GJ0Y5RjtGPkZARkJGREZGRkhGSkZNLUYjNihGaXJGaHktRmhuNiQtRiM2JkZoXGxGXnBGYXBGOUY5Rl5wRmFwRjlGXnBGYXBGOUZfby1GIzYoRl50RmhfbC1GIzYoRmlbbC1GNjYtUSMuLkYnRjlGO0Y+RkBGQkZERkZGSC9GS1EsMC4yMjIyMjIyZW1GJ0ZmbkZcb0ZecEZhcEY5Rl5wRmFwRjlGXnBGYXBGOUY5Rl5wRmFwRjlGXnBGYXBGOUY5LyUlb3BlbkdRInxmckYnLyUmY2xvc2VHUSJ8aHJGJ0ZecEZhcEY5Rmd0RmNwRl5wRmFwRjktRiM2KC1GIzYoRmJzRjUtRmhuNiYtRiM2Ji1GIzYoRmZebEZoeS1GaG42JC1GIzYoLUYjNigtRiM2KEZhX2xGaHktRmhuNiQtRiM2KEZpW2xGX29GW3RGXnBGYXBGOUY5Rl5wRmFwRjlGaF9sRmlbbEZecEZhcEY5Rl9vLUYjNihGW3RGaF9sLUYjNihGaVtsRmVgbEZlb0ZecEZhcEY5Rl5wRmFwRjlGXnBGYXBGOUY5Rl5wRmFwRjlGXnBGYXBGOUY5RmpgbEZdYWxGXnBGYXBGOUZndEZjcEZecEZhcEY5LUYjNigtRiM2KEZlc0Y1LUYjNipGX3NGZnEtRjY2L1EmdW5pb25GJ0ZURlZGWEY7Rj5GQEZCRkRGRkZIRlpGZm5GZnFGYnNGXnBGYXBGOUZecEZhcEY5Rmd0RmNwRl5wRmFwRjktRiM2KC1GIzYoRmhzRjUtRiM2KC1GaG42JC1GIzYoRl50Rl9vRlt0Rl5wRmFwRjlGOUZgeS1GIzYmLUYjNiYtRmhuNiQtRiM2JkZgdS1GNjYtUSp+JiM4NzIyO35GJ0Y5RjtGPkZARkJGREZGRkhGWkZmbi1GIzYmRmR4Rmd3RmZyRjlGOUY5Rmd3LUYjNihGYV9sRmh5RmljbEZecEZhcEY5RjktRjY2LVEiK0YnRjlGO0Y+RkBGQkZERkZGSEZoYGwvRk5GaWBsLUYjNiZGZnJGZ3ctRmhuNiQtRiM2Ji1GIzYoRmFfbEZoeS1GaG42JC1GIzYoLUYjNiZGXnRGXGVsRmB1RjlGX29GW3RGXnBGYXBGOUY5Rl5wRmFwRjlGXGVsLUYjNihGYV9sRmh5LUZobjYkLUYjNigtRiM2JkZedEZlZGxGYHVGOUZfb0ZbdEZecEZhcEY5RjlGXnBGYXBGOUY5RjlGOUY5Rl5wRmFwRjlGXnBGYXBGOUZndEZjcEZecEZhcEY5LUYjNigtRiM2Ki1GIzYyRmNbbEZmcUZbdEZmcUZmW2xGZnFGaVtsRmZxRlxcbEZmcUZlb0ZmcUZfXGxGXnBGYXBGOUZiXGwtRiM2Ki1GIzYuRmNbbEZmcUZedEZmcUZcXGxGZnEtRiM2JkZcb0ZlZGxGYHVGOUZmcUZfXGxGXnBGYXBGOUZiXGwtRiM2KC1GIzYoRmFfbEZoeS1GaG42JC1GIzYoRl50Rl9vLUYjNiZGW3RGXGVsRmB1RjlGXnBGYXBGOUY5Rl5wRmFwRjlGNS1GIzYoLUYsNiVRJXN1YnNGJ0YvRjJGaHktRmhuNiQtRiM2KEZlc0Zfby1GIzYoRmhzRmh5RmljbEZecEZhcEY5Rl5wRmFwRjlGOUZecEZhcEY5Rl5wRmFwRjlGZV1sRmldbEZecEZhcEY5RmVdbEZpXWxGXnBGYXBGOUZndEZjcEZecEZhcEY5LUYjNigtRiM2KEZhdEY1LUYjNihGW3RGYHktRiM2KC1GLDYlUSVwbG90RidGL0YyRmh5LUZobjYkLUYjNigtRmhuNiYtRiM2Ji1GIzYoRmZebEZoeS1GaG42JC1GIzYoLUZobjYmLUYjNigtRiM2KEZcc0ZoeS1GaG42JEZeXWxGOUZecEZhcEY5Rl9vLUYjNihGXmhsRmh5LUZobjYkLUYjNihGZXNGX29GamRsRl5wRmFwRjlGOUZecEZhcEY5Rl5wRmFwRjlGOS9GW2FsRlxdbC9GXmFsRmJdbEZfb0ZhYGxGXnBGYXBGOUY5Rl5wRmFwRjlGXnBGYXBGOUY5Rl5bbUZfW21GX28tRiM2KC1GLDYlUSZjb2xvckYnRi9GMkZoX2wtRiw2JVElYmx1ZUYnRi9GMkZecEZhcEY5Rl5wRmFwRjlGOUZecEZhcEY5Rl5wRmFwRjlGXnBGYXBGOUZndEZjcEZecEZhcEY5LUYjNigtRiM2KEZkdEY1LUYjNigtRiM2KC1GLDYlUSp0aGlja25lc3NGJ0YvRjJGaF9sLUZhdTYkUSIzRidGOUZecEZhcEY5Rl9vLUYjNigtRiw2JVEnbGFiZWxzRidGL0YyRmhfbC1GaG42Ji1GIzYoLUkjbXNHRiQ2I0Zec0Zfby1GYF1tNiNRIllGJ0ZecEZhcEY5RjlGXlttRl9bbUZecEZhcEY5Rl5wRmFwRjlGXnBGYXBGOUZndEZjcEZecEZhcEY5LUYjNigtRiw2JVEoZGlzcGxheUYnRi9GMkZoeS1GaG42JC1GIzYqLUZobjYmLUYjNiYtRiM2KEZmXmxGaHktRmhuNiQtRiM2KC1GIzYoRmF0Rmh5LUZobjYkLUYjNiZGW3RGXnBGYXBGOUY5Rl5wRmFwRjlGX29GZmJsRl5wRmFwRjlGOUZecEZhcEY5Rl5wRmFwRjlGOUZeW21GX1ttRl9vLUYjNigtRiw2JVEraW5zZXF1ZW5jZUYnRi9GMkZoX2wtRiw2JUYxRi9GMkZecEZhcEY5Rl9vRmR0Rl5wRmFwRjlGOUZecEZhcEY5Rl5wRmFwRjlGZV1sLUY2Ni9RKWVuZH5wcm9jRidGVEZWRlhGO0Y+RkBGQkZERkZGSEZaRmZuRl5wRmFwRjlGXnBGYXBGOQ==">Zio2JkkjTlhHNiJJI05UR0YlSSJMR0YlSSJUR0YlNjBJI251R0YlSSJoR0YlSSJrR0YlSSJyR0YlSSJmR0YlSSJYR0YlSSNJQ0dGJUkjQkNHRiVJJElCQ0dGJUkjRkRHRiVJImpHRiVJImlHRiVJIkdHRiVJJW9wczFHRiVGJUYlQzA+OCQiIiI+OCUqJjkmRjs5JCEiIj44JiomOSdGOzklRkE+OCcqKEY6RjtGQ0Y7Rj0hIiM+OChmKjYjSSJ4R0YlRiU2JEkpb3BlcmF0b3JHRiVJJmFycm93R0YlRiUtSSZldmFsZkclKnByb3RlY3RlZEc2Iy1JJHNpbkdGJTYjKiZJI1BpR0ZVRjtGQEY7RiVGJUYlPyg4LyIiIUY7RkBJJXRydWVHRlU+JjgpNiNGZ24qJkZnbkY7Rj1GOz44KjwjLUkkc2VxR0ZVNiQvLUkiVUdGJTYkRmduRmhuLUZMNiNGW28vRmduO0ZobkZAPjgrPCMtRmNvNiQvLUZnbzYkRmhuOC5GaG4vRmVwO0ZobkZGPjgsLUkmdW5pb25HRlU2JEZgb0ZecD44LWYqNiRGNUY0RiVGUEYlLCYqJiwmRjtGO1QjRkpGOy1GZ282JEZARkZGO0Y7KiZGZHFGOywmLUZnbzYkLCZGQEY7RjtGO0ZGRjstRmdvNiQsJkZARjtGQUY7RkZGO0Y7RjtGJUYlNiRGLUZIPyhGZXBGaG5GO0ZGRmluPyhGZ25GO0Y7Rl5yRmluPi1GZ282JEZnbiwmRmVwRjtGO0Y7LUklc3Vic0dGVTYkRmlwLUZecTYkRmduRmVwPjgwZio2I0Y0RiVGUEYlLUklcGxvdEdGJTYkNyMtRmNvNiQ3JC1UJTYjRmRxLUZncjYkVCctRmdvNiRGZHFGQC9GZHE7RmhuVCovSSZjb2xvckdGJUklYmx1ZUdGJUYlRiU2KkY1RmduRi9GXG9GMkZpcEYkRkA+ODE2JC9JKnRoaWNrbmVzc0dGJSIiJC9JJ2xhYmVsc0dGJTckUSJYRiVRIllGJS1JKGRpc3BsYXlHRiU2JTcjLUZjbzYkLUZcczYjRmVwRmZwL0kraW5zZXF1ZW5jZUdGJUZpbkZmdEYlRiVGJQ==</Equation></Text-field>
</Output>
</Group>
<Group labelreference="L3" drawlabel="true">
<Input>
<Text-field prompt="&gt; " style="Maple Input" layout="Normal"><Equation executable="true" style="2D Input" input-equation="FiniteDifferencep162(15, 100, 1.0, .2)" display="LUklbXJvd0c2Iy9JK21vZHVsZW5hbWVHNiJJLFR5cGVzZXR0aW5nR0koX3N5c2xpYkdGJzYmLUkjbWlHRiQ2JVE1RmluaXRlRGlmZmVyZW5jZXAxNjJGJy8lJ2l0YWxpY0dRJXRydWVGJy8lLG1hdGh2YXJpYW50R1EnaXRhbGljRictSShtZmVuY2VkR0YkNiQtRiM2Ky1JI21uR0YkNiRRIzE1RicvRjNRJ25vcm1hbEYnLUkjbW9HRiQ2LVEiLEYnRj4vJSZmZW5jZUdRJmZhbHNlRicvJSpzZXBhcmF0b3JHRjEvJSlzdHJldGNoeUdGRi8lKnN5bW1ldHJpY0dGRi8lKGxhcmdlb3BHRkYvJS5tb3ZhYmxlbGltaXRzR0ZGLyUnYWNjZW50R0ZGLyUnbHNwYWNlR1EmMC4wZW1GJy8lJ3JzcGFjZUdRLDAuMzMzMzMzM2VtRictRjs2JFEkMTAwRidGPkZALUY7NiRRJDEuMEYnRj5GQC1GOzYkUSQwLjJGJ0Y+LyUrZXhlY3V0YWJsZUdGRkY+Rj5GXG9GPg==">LUk1RmluaXRlRGlmZmVyZW5jZXAxNjJHNiI2JiIjOiIkKyIkIiM1ISIiJCIiI0Yq</Equation></Text-field>
</Input>
<Output>
<Text-field style="2D Output" layout="Maple Output"><Equation executable="false" style="2D Output" display="LUklbXJvd0c2Iy9JK21vZHVsZW5hbWVHNiJJLFR5cGVzZXR0aW5nR0koX3N5c2xpYkdGJzYoLUkjbWlHRiQ2JVEoZGlzcGxheUYnLyUnaXRhbGljR1EldHJ1ZUYnLyUsbWF0aHZhcmlhbnRHUSdpdGFsaWNGJy1JI21vR0YkNi1RMCZBcHBseUZ1bmN0aW9uO0YnL0YzUSdub3JtYWxGJy8lJmZlbmNlR1EmZmFsc2VGJy8lKnNlcGFyYXRvckdGPS8lKXN0cmV0Y2h5R0Y9LyUqc3ltbWV0cmljR0Y9LyUobGFyZ2VvcEdGPS8lLm1vdmFibGVsaW1pdHNHRj0vJSdhY2NlbnRHRj0vJSdsc3BhY2VHUSYwLjBlbUYnLyUncnNwYWNlR0ZMLUkobWZlbmNlZEdGJDYkLUYjNiwtRlA2Ji1GIzZody1GIzYoLUYsNiVRJVBMT1RGJ0YvRjJGNS1GUDYkLUYsNiVRJC4uLkYnRi9GMkY5LyUrZm9yZWdyb3VuZEdRKFswLDAsMF1GJy8lKXJlYWRvbmx5R0Y9RjktRjY2LVEiLEYnRjlGOy9GP0YxRkBGQkZERkZGSEZKL0ZOUSwwLjMzMzMzMzNlbUYnRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGYW9GWEZhb0ZYRmFvRlhGXG9GX29GOUY5LyUlb3BlbkdRIltGJy8lJmNsb3NlR1EiXUYnRmFvLUYjNigtRiw2JVEraW5zZXF1ZW5jZUYnRi9GMi1GNjYtUSI9RidGOUY7Rj5GQEZCRkRGRkZIL0ZLUSwwLjI3Nzc3NzhlbUYnL0ZORmZwLUYsNiVGMUYvRjJGXG9GX29GOUZhby1GIzYoLUYsNiVRKnRoaWNrbmVzc0YnRi9GMkZicC1JI21uR0YkNiRRIjNGJ0Y5RlxvRl9vRjlGYW8tRiM2KC1GLDYlUSdsYWJlbHNGJ0YvRjJGYnAtRlA2Ji1GIzYoLUkjbXNHRiQ2I1EiWEYnRmFvLUZdcjYjUSJZRidGXG9GX29GOUY5RmdvRmpvRlxvRl9vRjlGXG9GX29GOUY5RlxvRl9vRjk="></Equation></Text-field>
</Output>
</Group>
<Group labelreference="L4" drawlabel="true">
<Input>
<Text-field prompt="&gt; " style="Maple Input" layout="Normal"><Equation executable="true" style="2D Input" input-equation="" display="LUklbXJvd0c2Iy9JK21vZHVsZW5hbWVHNiJJLFR5cGVzZXR0aW5nR0koX3N5c2xpYkdGJzYlLUkjbWlHRiQ2I1EhRicvJStleGVjdXRhYmxlR1EmZmFsc2VGJy8lLG1hdGh2YXJpYW50R1Enbm9ybWFsRic=">JSFH</Equation></Text-field>
</Input>
</Group>
</Worksheet>